@page "/order/list"
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using YumBlazor.Utility
@inject IOrderRepository _orderRepository
@inject NavigationManager _navigationManager
@inject AuthenticationStateProvider _authenticationStateProvider

@attribute [Authorize]
@if (IsProcessing)
{
    <div class="position-absolute w-100 vh-100 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/Images/loading.gif" />
    </div>
}
else
{
    <div class="card shadow border-0 m-4">
        <div class="card-header bg-black bg-gradient ml-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py-2">Order List</h2>
                </div>
            </div>
        </div>

        @if (OrderHeaders.Any())
        {
            <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" 
            AllowSorting="true" PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                            Data="@OrderHeaders" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or" SelectionMode="DataGridSelectionMode.Single">
                <Columns>
                    <RadzenDataGridColumn Property="Id" Filterable="false" Title="ID" Frozen="true" Width="80px" TextAlign="TextAlign.Center" />

                    <RadzenDataGridColumn Property="Name" Title="First Name" Frozen="true" Width="120px" />
                    <RadzenDataGridColumn Property="PhoneNumber" Title="Phone Number" Width="120px" />
                    <RadzenDataGridColumn Property="Email" Title="Email" Width="200px" />
                    <RadzenDataGridColumn Property="OrderTotal" Title="Order Total" FormatString="{0:C}" Width="120px" />
                    <RadzenDataGridColumn Property="OrderDate" Title="Order Date" FormatString="{0:d}" Width="160px" />
                    <RadzenDataGridColumn Property="Status" Title="Status"  Width="160px" />
                    <RadzenDataGridColumn Title="Action" Sortable="false" Filterable="false" Width="80px" TextAlign="TextAlign.Center">
                        <Template Context="orderHeader">
                            <RadzenButton Shade="Shade.Lighter" Text="Details" ButtonStyle="ButtonStyle.Primary"
                            Click="@(()=>_navigationManager.NavigateTo($"order/details/{orderHeader.Id}"))"></RadzenButton>
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>

        }
    </div>
}

@code {
    private bool IsProcessing { get; set; } = true;
    private IEnumerable<OrderHeader> OrderHeaders { get; set; } = new List<OrderHeader>();
    public Task<AuthenticationState> authenticationState { get; set; }

    public bool? isAdmin { get; set; }
    public string? userId { get; set; }

    protected override async Task OnInitializedAsync()
    {

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await loadOrderHeader();
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private async Task loadOrderHeader()
    {
        IsProcessing = true;
        StateHasChanged();

        await CheckAuthorization();
        // Load categories
        if (isAdmin == true)
        {
            OrderHeaders = await _orderRepository.GetAllAsync();
        }
        else
        {
            OrderHeaders = await _orderRepository.GetAllAsync(userId);
        }

        IsProcessing = false;
    }
    private async Task CheckAuthorization()
    {
        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        // Load categories
        if (authState != null)
        {
            // var authState = await authenticationState;
            var user = authState.User;
            if (user.Identity.IsAuthenticated)
            {
                // User is authenticated
                isAdmin = user.IsInRole(SD.Role_admin);
                userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            }
        }   
    }

}
