@page "/order/list"
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using YumBlazor.Utility
@inject IOrderRepository _orderRepository
@inject NavigationManager _navigationManager
@inject AuthenticationStateProvider _authenticationStateProvider

@attribute [Authorize]
@if (IsProcessing)
{
    <div class="position-absolute w-100 vh-100 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/Images/loading.gif" />
    </div>
}
else
{
    <div class="card shadow border-0 m-4">
        <div class="card-header bg-black bg-gradient ml-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py-2">Order List</h2>
                </div>
            </div>
        </div>

        @if (OrderHeaders.Any())
        {
            <table class="table table-bordered table-striped">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Name</th>
                        <th>Phone Number</th>
                        <th>Email</th>
                        <th>Order Total</th>
                        <th>Order Date</th>
                        <th>Status</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var obj in OrderHeaders)
                    {
                        <tr>
                            <td>@obj.Id</td>
                            <td>@obj.Name</td>
                            <td>@obj.PhoneNumber</td>
                            <td>@obj.Email</td>
                            <td>@obj.OrderTotal.ToString("c")</td>
                            <td>@obj.OrderDate</td>
                            <td>@obj.Status</td>
                            <td>
                                <a href="@($"order/details/{obj.Id}")" class="btn btn-primary">
                                    <i class="bi bi-pencil-square"></i> Details
                                </a>

                            </td>

                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
}

@code {
    private bool IsProcessing { get; set; } = true;
    private IEnumerable<OrderHeader> OrderHeaders { get; set; } = new List<OrderHeader>();
    public Task<AuthenticationState> authenticationState { get; set; }

    public bool? isAdmin { get; set; }
    public string? userId { get; set; }

    protected override async Task OnInitializedAsync()
    {

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await loadOrderHeader();
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private async Task loadOrderHeader()
    {
        IsProcessing = true;
        StateHasChanged();

        await CheckAuthorization();
        // Load categories
        if (isAdmin == true)
        {
            OrderHeaders = await _orderRepository.GetAllAsync();
        }
        else
        {
            OrderHeaders = await _orderRepository.GetAllAsync(userId);
        }

        IsProcessing = false;
    }
    private async Task CheckAuthorization()
    {
        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        // Load categories
        if (authState != null)
        {
            // var authState = await authenticationState;
            var user = authState.User;
            if (user.Identity.IsAuthenticated)
            {
                // User is authenticated
                isAdmin = user.IsInRole(SD.Role_admin);
                userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            }
        }   
    }

}
